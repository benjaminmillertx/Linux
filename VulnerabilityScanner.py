For educational , Ethical Hacking , or DFIR.
Script by Benjamin Hunter Miller
import requests
from urllib.parse import urlparse

def scan_vulnerabilities(target_url):
    # Parse the target URL to handle the domain and protocol properly
    parsed_url = urlparse(target_url)
    
    # Ensure the URL uses HTTPS for security
    if parsed_url.scheme != "https":
        print("Warning: The target website is not using HTTPS. This could be insecure.")
    
    # Perform an HTTP request to the target website
    try:
        response = requests.get(target_url, timeout=10)  # Add timeout to avoid hanging indefinitely
        
        # Check if the website is up and running
        if response.status_code == 200:
            print("Target website is up and running")
            print(f"HTTP Status Code: {response.status_code}")
            
            # Additional Vulnerability Checks:
            
            # 1. Check for HTTP security headers
            security_headers = [
                "Strict-Transport-Security",  # Prevents downgrade attacks
                "X-Content-Type-Options",    # Protects against MIME-sniffing
                "X-Frame-Options",           # Protects against clickjacking
                "Content-Security-Policy",   # Prevents XSS attacks
                "X-XSS-Protection"           # XSS filter
            ]
            missing_headers = [header for header in security_headers if header not in response.headers]
            
            if missing_headers:
                print(f"Warning: Missing important security headers: {', '.join(missing_headers)}")
            else:
                print("All critical security headers are present.")
            
            # 2. Check for SSL/TLS vulnerabilities (ensure HTTPS usage)
            if not target_url.startswith("https"):
                print("Warning: The website does not use HTTPS.")
            else:
                print("SSL/TLS is properly configured (HTTPS detected).")
            
            # 3. Test for potential XSS vulnerability
            # (Look for the possibility of XSS by checking if input fields are reflected in response)
            xss_payloads = ["<script>alert('xss')</script>", "<img src='x' onerror='alert(1)'>"]
            for payload in xss_payloads:
                test_url = f"{target_url}?input={payload}"
                test_response = requests.get(test_url)
                if payload in test_response.text:
                    print(f"Potential XSS vulnerability detected with payload: {payload}")
            
            # 4. Test for Directory Traversal vulnerability
            traversal_payload = "../../../etc/passwd"
            test_url = f"{target_url}/{traversal_payload}"
            test_response = requests.get(test_url)
            if "root:" in test_response.text:  # Simple check for a UNIX-style passwd file
                print("Potential Directory Traversal vulnerability detected.")
            
        else:
            print(f"Target website is not accessible. HTTP Status Code: {response.status_code}")
    
    except requests.RequestException as e:
        print(f"An error occurred: {e}")

# Usage example
scan_vulnerabilities("https://www.example.com")
