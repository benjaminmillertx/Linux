import pandas as pd
from sklearn.model_selection import train_test_split
from xgboost import XGBClassifier
from sklearn.metrics import accuracy_score
from sklearn.feature_selection import SelectKBest, chi2
from sklearn.preprocessing import LabelEncoder

# Load the dataset
dataset = pd.read_csv('vulnerabilities_dataset.csv')

# Preprocess the data (example: handling missing values and encoding)
dataset.fillna(dataset.mean(), inplace=True)  # Handling missing values by mean imputation
X = dataset.drop('target', axis=1)  # Assuming the target variable is 'target'
y = dataset['target']

# Encode the target labels if they're categorical
label_encoder = LabelEncoder()
y = label_encoder.fit_transform(y)

# Split the data into train and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Feature selection using SelectKBest and chi2
selector = SelectKBest(score_func=chi2, k=10)
X_train_selected = selector.fit_transform(X_train, y_train)
X_test_selected = selector.transform(X_test)

# Build and train the machine learning model
model = XGBClassifier()
model.fit(X_train_selected, y_train)

# Make predictions on the test set
y_pred = model.predict(X_test_selected)

# Evaluate the model's performance
accuracy = accuracy_score(y_test, y_pred)
print("Accuracy:", accuracy)
